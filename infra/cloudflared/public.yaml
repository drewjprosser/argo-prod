apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared-configmap
  namespace: cloudflared
data:
  config.yaml: |
    tunnel: prod
    credentials-file: /etc/cloudflared/creds/credentials.json
    metrics: 0.0.0.0:2000
    no-autoupdate: true

    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.

    ingress:
    - hostname: prossertech.com
      service: http://prossertech-svc.prossertech.svc.cluster.local
    - hostname: git.prossertech.com 
      service: http://gitea-http.gitea.svc.cluster.local:3000
    - hostname: guacamole.prossertech.com
      service: https://10.10.10.150:8443/
    - service: http_status:404
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: cloudflared
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  # restartPolicy: Always
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2024.6.1
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        resources:
          limits:
            memory: "1Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 60
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
          # ```
          secretName: tunnel-credentials
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: cloudflared-configmap
          items:
          - key: config.yaml
            path: config.yaml
